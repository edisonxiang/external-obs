#!/bin/sh

# Copyright 2018 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ==============================================================================
# Config
# ==============================================================================
# Uncomment to disable logging to /tmp/obsflexvolume.log
#INTERNAL_DEBUG=false

# ==============================================================================
# Defaults and Helpers
# ==============================================================================
INTERNAL_DEBUG=${INTERNAL_DEBUG:-"true"}

# Saves debug output to a log file.
debug() {
    if [ "${INTERNAL_DEBUG}" = "true" ]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') flex[$$]: $*" >> /tmp/obsflexvolume.log
    fi
}

err() {
    echo "$*" 1>&2
    debug "err() called: "$*
}

log() {
    echo "$*" >&1
    debug "log() called: "$*
}

die_notsupported() {
    log "{\"status\": \"Not supported\", \"message\": \"$*\"}"
    exit 0
}

usage() {
    err "Usage:"
    err "  $0 <action> [<params>]"
    err ""
    die_notsupported "Invalid usage of flex CLI."
}

assert_jq() {
    if ! command -v jq >/dev/null 2>&1; then
      err "{ \"status\": \"Failure\", \"message\": \"'jq' binary not found. Please install jq package before using this driver\"}"
      exit 1
    fi
}

ismounted() {
	CONTAINER=`docker ps --filter "label=mountpath=${mount_dir}" --format "{{.ID}}"`
	if [ "${CONTAINER}" == "" ]; then
		echo "0"
	else
		echo "1"
	fi
}

# ==============================================================================
# Actions
# ==============================================================================

# Initializes the driver
doinit(){
    log "{\"status\": \"Success\", \"capabilities\": {\"attach\": false}"
    exit 0
}

# get volume's name
dogetvolumename() {
    log "{\"status\": \"Success\"}"
    exit 0
}

# Attach the volume specified by the given spec on the given host
doattach() {
    log "{\"status\": \"Success\"}"
    exit 0
}

# Detach the volume from the Kubelet node
dodetach() {
    log "{\"status\": \"Success\"}"
    exit 0
}

# Wait for the volume to be attached on the remote node
dowaitforattach() {
    log "{\"status\": \"Success\"}"
    exit 0
}

# Check the volume is attached on the node
doisattached() {
    log "{\"status\": \"Success\"}"
    exit 0
}

# Mount device mounts the device to a global path which individual pods can then bind mount.
domountdevice() {
    log "{\"status\": \"Success\"}"
    exit 0
}

# Mount device mounts the device to a global path which individual pods can then bind mount.
dounmountdevice() {
    log "{\"status\": \"Success\"}"
    exit 0
}

# Mount the volume at the mount dir
domount() {
    local mount_dir=$1
    local json_options=$2
    debug "mount_dir called: "${mount_dir}
    debug "json_options called: "${json_options}

    die_notsupported # = using default

    assert_jq
    local OBSBucket=$(echo $2|jq -r '.["OBSBucket"]')
	local OBSAccessKey=$(echo $2|jq -r '.["OBSAccessKey"]')
	local OBSSecretKey=$(echo $2|jq -r '.["OBSSecretKey"]')
	local OBSEndpoint=$(echo $2|jq -r '.["OBSEndpoint"]')
    debug "OBSBucket called: "${OBSBucket}
    debug "OBSAccessKey called: "${OBSAccessKey}
    debug "OBSSecretKey called: "${OBSSecretKey}
    debug "OBSEndpoint called: "${OBSEndpoint}

    if [ $(ismounted) -eq 1 ] ; then
	    debug "it has already been mounted! "${mount_dir}
		log "{\"status\": \"Success\"}"
		exit 0
	fi

    mkdir -p ${mount_dir} &> /dev/null

    DOCKER_OUT=`docker run -d --privileged -l mountpath=${mount_dir} -e OBSAccessKey=${OBSAccessKey} -e OBSSecretKey=${OBSSecretKey} -v ${mount_dir}:/mnt/mountpoint:shared --cap-add SYS_ADMIN quay.io/huaweicloud/obs-flexvolume ${OBSBucket} /mnt/mountpoint -o passwd_file=/etc/passwd-s3fs -o url=${OBSEndpoint} -d -d -f -o f2 -o curldbg`
    debug "DOCKER_OUT called: "${DOCKER_OUT}

	log "{\"status\": \"Success\"}: "$*
    exit 0
}

# unmounts the volume
dounmount() {
    local mount_dir=$1
    debug "umount_dir called: "${mount_dir}

    die_notsupported # = using default

	if [ $(ismounted) -eq 0 ] ; then
		debug "it has already been unmounted! "${mount_dir}
		log "{\"status\": \"Success\"}"
		exit 0
	fi
        
    CONTAINER=`docker ps --filter "label=mountpath=${mount_dir}" --format "{{.ID}}"`
    debug "CONTAINER called: "${CONTAINER}
	docker rm ${CONTAINER} -f
    umount ${mount_dir}
    rmdir ${mount_dir} &> /dev/null

	log "{\"status\": \"Success\"}"
	exit 0
}

# log CLI
# debug $@

op="$1"

[ -n "$op" ] || usage

shift

debug "$op() called: "$*

case "$op" in
    init)
        doinit $*
        ;;
    getvolumename)
        dogetvolumename $*
        ;;
    attach)
        doattach $*
        ;;
    detach)
        dodetach $*
        ;;
    waitforattach)
        dowaitforattach $*
        ;;
    isattached)
        doisattached $*
        ;;
    mountdevice)
        domountdevice $*
        ;;
    unmountdevice)
        dounmountdevice $*
        ;;
    mount)
        domount $*
        ;;
    unmount)
        dounmount $*
        ;;
    *)
        die_notsupported "Command $op not supported"
esac
